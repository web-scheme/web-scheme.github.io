import{_ as e,r as t,o,c,d as n,a as p,b as i,e as s}from"./app.ed3351a4.js";const l={},u=i(`<h1 id="component-model" tabindex="-1"><a class="header-anchor" href="#component-model" aria-hidden="true">#</a> Component Model</h1><p>The Scheme Steering Committee once called Scheme <em>the world&#39;s most unportable programming language</em> <sup class="footnote-ref"><a href="#fn1" id="fnref1">[1]</a></sup>. This implementation tries to deviate from the report as little as possible, however Wasm&#39;s <a href="https://github.com/WebAssembly/component-model" target="_self" rel="noopener noreferrer">component model</a> presents a conundrum: Scheme is an untyped language, so taking advantage of Wasm component-level value types \u2014 and thus allowing WebScheme to interoperate with the rest of the Wasm ecosystem \u2014 will require extensions to the way Scheme libraries are defined. In this case only, the benefit is seen to far outweigh the consequences of deviation.</p><h2 id="interface-type-annotations" tabindex="-1"><a class="header-anchor" href="#interface-type-annotations" aria-hidden="true">#</a> Interface Type Annotations</h2><p>Other schemes have tried to extend the language with types, such as <a href="https://docs.racket-lang.org/ts-guide/" target="_self" rel="noopener noreferrer">typed Racket</a>. In most cases, extensions rely on complex non-standard syntax for concision and flexibility, making code highly unportable. WebScheme makes use of typed Racket&#39;s special <code>:</code> pseudo-function, however it:</p><ul><li>eschews the syntactic sugar for inline annotations,</li><li>requires definitions to precede annotations, and</li><li>uses Wasm types instead of Scheme types.</li></ul><p>This achieves the goal of Wasm interoperability while allowing WebScheme programs to be ported easily, by defining <code>:</code> as a no-op macro: <code>(define-syntax : (syntax-rules () ((: name type ...) (set! name name))))</code>.</p><p>Rough idea:</p><div class="language-scheme ext-scheme line-numbers-mode"><pre class="language-scheme"><code><span class="token comment">;; A simple example for a global variable.</span>
<span class="token comment">;; Assigning to any annotated object incurs an implicit type check.</span>
<span class="token comment">;; If type safety can be fully checked statically, no runtime overhead.</span>
<span class="token punctuation">(</span><span class="token keyword">define</span> x <span class="token number">5</span><span class="token punctuation">)</span>
<span class="token punctuation">(</span><span class="token function">:</span> x s32<span class="token punctuation">)</span>

<span class="token comment">;; Wasm&#39;s convenient choice to use S-expressions for the text representation</span>
<span class="token comment">;; means we can use its own type notations verbatim</span>
<span class="token comment">;; and even apply Scheme macros to them to define new typing syntax.</span>
<span class="token punctuation">(</span><span class="token keyword">define</span> <span class="token punctuation">(</span><span class="token function">foo</span> x y<span class="token punctuation">)</span>
  <span class="token punctuation">(</span><span class="token operator">+</span> x y<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">(</span><span class="token function">:</span> foo <span class="token punctuation">(</span><span class="token function">func</span> <span class="token punctuation">(</span><span class="token function">param</span> float64 s32<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token function">result</span> float64<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token comment">;; If a function is indeed meant to accept any Scheme object,</span>
<span class="token comment">;; the special built-in \`_\` type abbreviation can be used for convenience.</span>
<span class="token comment">;; Note that this actually does map to a coherent Wasm union type.</span>
<span class="token punctuation">(</span><span class="token keyword">define</span> <span class="token punctuation">(</span><span class="token function">bar</span> head . tail<span class="token punctuation">)</span>
  <span class="token punctuation">(</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token builtin">string?</span> head<span class="token punctuation">)</span>
    head
    <span class="token punctuation">(</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token builtin">null?</span> tail<span class="token punctuation">)</span>
      <span class="token boolean">#f</span>
      <span class="token punctuation">(</span><span class="token function">bar</span> tail<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">(</span><span class="token function">:</span> bar <span class="token punctuation">(</span><span class="token function">func</span> <span class="token punctuation">(</span><span class="token function">param</span> _ <span class="token punctuation">(</span><span class="token builtin">list</span> _<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token function">result</span> <span class="token punctuation">(</span><span class="token function">union</span> string bool<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token comment">;; Annotating a record type introduces a new type abbreviation</span>
<span class="token comment">;; that can be used in other annotations (in the same scope),</span>
<span class="token comment">;; even recursively.</span>
<span class="token punctuation">(</span><span class="token keyword">define-record-type</span> pare
  <span class="token punctuation">(</span><span class="token function">kons</span> a b<span class="token punctuation">)</span>
  pare?
  <span class="token punctuation">(</span><span class="token function">a</span> kar set-kar!<span class="token punctuation">)</span>
  <span class="token punctuation">(</span><span class="token function">b</span> kdr set-kdr!<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">(</span><span class="token function">:</span> pare <span class="token punctuation">(</span><span class="token function">record</span> <span class="token punctuation">(</span><span class="token function">field</span> <span class="token string">&quot;a&quot;</span> string<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token function">field</span> <span class="token string">&quot;b&quot;</span> <span class="token punctuation">(</span><span class="token function">union</span> pare unit<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr class="footnotes-sep">`,9),r={class:"footnotes"},d={class:"footnotes-list"},m={id:"fn1",class:"footnote-item"},k=s("See their 2009-08-20 "),f={href:"http://scheme-reports.org/2009/position-statement.html",target:"_blank"},h=s("position statement "),v=s(". "),b=n("a",{href:"#fnref1",class:"footnote-backref"},"\u21A9\uFE0E",-1);function y(g,_){const a=t("ExternalLinkIcon");return o(),c("div",null,[u,n("section",r,[n("ol",d,[n("li",m,[n("p",null,[k,n("a",f,[h,p(a)]),v,b])])])])])}var w=e(l,[["render",y],["__file","component-model.html.vue"]]);export{w as default};
